<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title><%= title || 'Flappy Bird' %></title>
  <style>
    /* Style for the canvas */
    canvas {
      background: #70c5ce;
      display: block;
      margin: 0 auto;
    }
    /* Style for the jump button */
    #jumpBtn {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 15px 30px;
      font-size: 20px;
      border: none;
      border-radius: 5px;
      background-color: #4CAF50;
      color: white;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="320" height="480"></canvas>
  <!-- Jump Button for mobile devices -->
  <button id="jumpBtn">Jump</button>
  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    // Game variables
    let frames = 0;
    const pipeGap = 100;
    const pipeWidth = 50;
    let score = 0;

    // Bird object with properties for position, size, physics, etc.
    const bird = {
      x: 50,
      y: 150,
      width: 20,
      height: 20,
      gravity: 0.6,
      jump: 8.5,
      speed: 0
    };

    // Array to hold pipe objects; each pipe has an x position and a gap starting position (y)
    let pipes = [];
    // Create the first pipe
    pipes.push({
      x: canvas.width,
      y: Math.floor(Math.random() * (canvas.height - pipeGap))
    });

    // Function to draw the bird as a yellow rectangle
    function drawBird() {
      ctx.fillStyle = "yellow";
      ctx.fillRect(bird.x, bird.y, bird.width, bird.height);
    }

    // Function to draw all the pipes
    function drawPipes() {
      ctx.fillStyle = "green";
      pipes.forEach(function(p) {
        // Top pipe
        ctx.fillRect(p.x, 0, pipeWidth, p.y);
        // Bottom pipe
        ctx.fillRect(p.x, p.y + pipeGap, pipeWidth, canvas.height - (p.y + pipeGap));
      });
    }

    // Update the game objects and check for collisions
    function update() {
      frames++;

      // Bird physics: apply gravity and update its vertical position
      bird.speed += bird.gravity;
      bird.y += bird.speed;

      // Generate new pipes every 100 frames
      if (frames % 100 === 0) {
        pipes.push({
          x: canvas.width,
          y: Math.floor(Math.random() * (canvas.height - pipeGap))
        });
      }

      // Move pipes to the left
      pipes.forEach(function(p) {
        p.x -= 2;
      });

      // Remove offscreen pipes and update the score
      if (pipes.length > 0 && pipes[0].x + pipeWidth < 0) {
        pipes.shift();
        score++;
      }

      // Collision detection with pipes
      for (let i = 0; i < pipes.length; i++) {
        let p = pipes[i];
        // Check collision with the top pipe
        if (
          bird.x + bird.width > p.x &&
          bird.x < p.x + pipeWidth &&
          bird.y < p.y
        ) {
          resetGame();
          return;
        }
        // Check collision with the bottom pipe
        if (
          bird.x + bird.width > p.x &&
          bird.x < p.x + pipeWidth &&
          bird.y + bird.height > p.y + pipeGap
        ) {
          resetGame();
          return;
        }
      }

      // Collision with the ground or ceiling
      if (bird.y + bird.height > canvas.height || bird.y < 0) {
        resetGame();
        return;
      }
    }

    // Draw everything on the canvas
    function draw() {
      // Clear the canvas with the sky-blue background
      ctx.fillStyle = "#70c5ce";
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      drawPipes();
      drawBird();

      // Display score
      ctx.fillStyle = "white";
      ctx.font = "20px Arial";
      ctx.fillText("Score: " + score, 10, 25);
    }

    // Reset the game after a collision
    function resetGame() {
      bird.y = 150;
      bird.speed = 0;
      pipes = [];
      pipes.push({
        x: canvas.width,
        y: Math.floor(Math.random() * (canvas.height - pipeGap))
      });
      frames = 0;
      score = 0;
    }

    // Main game loop using requestAnimationFrame
    function loop() {
      update();
      draw();
      requestAnimationFrame(loop);
    }
    loop();

    // Listen for user input: spacebar or mouse click to make the bird "jump"
    document.addEventListener("keydown", function(e) {
      if (e.code === "Space") {
        bird.speed = -bird.jump;
      }
    });
    document.addEventListener("click", function() {
      bird.speed = -bird.jump;
    });
    
    // Add jump functionality for the jump button
    document.getElementById("jumpBtn").addEventListener("click", function(e) {
      bird.speed = -bird.jump;
      // Prevent the click from also triggering the canvas click event
      e.stopPropagation();
    });
  </script>
</body>
</html>
