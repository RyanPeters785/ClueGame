<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clue Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
            background-color: #f0f8ff;
        }
        .game-container {
            margin: 20px auto;
            max-width: 800px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
            background-color: white;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        .player-info {
            font-size: 18px;
            margin-bottom: 20px;
            background: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
        }
        .cards-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin-top: 30px;
        }
        .card {
            border: 2px solid #333;
            border-radius: 8px;
            padding: 10px;
            width: 120px;
            height: 160px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .card.card-image::before {
            content: "";
            display: block;
            padding-top: 100%; /* Forces a square area as placeholder */
        }
        .card-image {
            background-size: cover;
            background-position: center;
            padding: 0; /* Remove padding to let image fill the entire card */
            overflow: hidden; /* Prevent image from spilling outside border */
            background-repeat: no-repeat; /* Ensure image doesn't repeat */
            position: relative; /* For positioning the card label */
        }
        .suspect-card {
            border-color: #ff9999;
        }
        .weapon-card {
            border-color: #99ff99;
        }
        .room-card {
            border-color: #9999ff;
        }
        .card-title {
            font-weight: bold;
            margin-bottom: 10px;
        }
        .card-label {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            color: white;
            padding: 5px;
            font-size: 12px;
            text-align: center;
        }
        h2 {
            color: #333;
            margin-top: 40px;
        }
        .next-button {
            background-color: #4CAF50;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 30px;
            transition: background-color 0.3s;
        }
        .next-button:hover {
            background-color: #45a049;
        } 
        .current-turn {
            background-color: #f0f0f0;
            border: 2px solid #4CAF50;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
        }
        .turn-notification {
            background-color: #e7f3fe;
            border: 1px solid #b6d4fe;
            color: #0062cc;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
        }
        .waiting-notification {
            background-color: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
        }
        .make-suggestion-button {
            background-color: #4a6ea9;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 20px;
            margin-bottom: 20px;
        }
        .make-suggestion-button:hover {
            background-color: #3a5a8f;
        }
    </style>
</head>
<body>
    <h1>Clue Game</h1>
    
    <div class="player-info">
        Playing as: <strong><%= playerName %></strong>
    </div>
    
    <div class="game-container">
        <h2>Your Cards</h2>
        
        <div class="cards-container">
            <% playerCards.forEach(card => {
              let cardType = 'room-card';
              let isSuspect = ["Colonel Mustard", "Professor Plum", "Mr. Green", "Mrs. Peacock", "Miss Scarlet", "Mrs. White"].includes(card);
              let isWeapon = ["Candlestick", "Knife", "Lead Pipe", "Revolver", "Rope", "Wrench"].includes(card);
              
              if (isSuspect) cardType = 'suspect-card';
              else if (isWeapon) cardType = 'weapon-card';
              
              // Get image URL for the card based on its name
              const imageUrl = '/cards/' + encodeURIComponent(card) + '.png';
            %>
              <div class="card <%= cardType %> card-image" style="background-image: url('<%= imageUrl %>');">
                <div class="card-label"><%= card %></div>
              </div>
            <% }); %>
        </div>
          
        <div class="current-turn">
            <h3>Current Turn</h3>
            <p>It's <strong><%= currentTurn %>'s</strong> turn</p>
            <% if (playerName === currentTurn) { %>
                <div class="turn-notification">
                    <p>It's your turn! Make your move.</p>
                    <button class="make-suggestion-button" onclick="window.location.href='/make-suggestion'">Make a Suggestion</button>
                </div>
            <% } else { %>
                <div class="waiting-notification">
                    <p>Waiting for <%= currentTurn %> to make a move...</p>
                </div>
            <% } %>
        </div>
        
        <% if (playerCards.length === 0) { %>
            <p>You don't have any cards.</p>
        <% } %>
        
        <button class="next-button" onclick="window.location.href='/deduction'">View Detective Notes</button>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add event listener to handle image loading errors
            document.querySelectorAll('.card-image').forEach(card => {
                const backgroundImg = card.style.backgroundImage;
                const url = backgroundImg.slice(5, -2); // Extract URL from url('...') format
                
                const img = new Image();
                img.onerror = function() {
                    console.log('Failed to load card image...')
                    // If image fails to load, add a fallback style
                    const cardType = card.classList.contains('suspect-card') ? 'Suspect' :
                                    card.classList.contains('weapon-card') ? 'Weapon' : 'Room';
                    const cardName = card.querySelector('.card-label').textContent;
                    
                    // Remove background image and reset styles
                    card.style.backgroundImage = '';
                    card.classList.remove('card-image');
                    card.innerHTML = `
                        <div class="card-title">${cardType}</div>
                        ${cardName}
                    `;
                };
                img.src = url;
            });
        });
        
        // Poll server to check if this player needs to respond to a suggestion
        function startResponsePolling() {
            // Only start polling if not current turn (to avoid conflicts)
            if ('<%= playerName %>' !== '<%= currentTurn %>') {
                const responseInterval = setInterval(() => {
                    fetch('/api/check-response-turn')
                        .then(response => response.json())
                        .then(data => {
                            if (data.shouldRespond) {
                                clearInterval(responseInterval);
                                window.location.href = '/respond';
                            }
                        })
                        .catch(error => {
                            console.error('Error checking response turn:', error);
                        });
                }, 1000); // Check every second
            }
        }
        
        // Start polling when page loads
        document.addEventListener('DOMContentLoaded', function() {
            startResponsePolling();
            
            // Also check for game updates (current turn changes, etc.)
            setInterval(() => {
                fetch('/api/game-status')
                    .then(response => response.json())
                    .then(data => {
                        if (data.gameOver) {
                            alert(`${data.winner} has won the game! ðŸŽ‰`);
                            window.location.reload();
                        } else if (data.currentTurn !== '<%= currentTurn %>') {
                            window.location.reload();
                        } else if (data.currentTurn === '<%= playerName %>' && window.location.pathname === '/game') {
                            // This is a notification to the current player that it's their turn
                            // You could highlight the Make Suggestion button or show a toast/notification here
                        }
                    });
            }, 1000); // Check every second
        });
    </script>
</body>
</html>