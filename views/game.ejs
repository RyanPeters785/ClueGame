<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clue Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
            background-color: #f0f8ff;
        }
        .game-container {
            margin: 20px auto;
            max-width: 800px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
            background-color: white;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        .player-info {
            font-size: 18px;
            margin-bottom: 20px;
            background: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
        }
        .cards-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin-top: 30px;
        }
        .card {
            border: 2px solid #333;
            border-radius: 8px;
            padding: 10px;
            width: 120px;
            height: 160px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #fff;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .suspect-card {
            background-color: #ffeded;
            border-color: #ff9999;
        }
        .weapon-card {
            background-color: #edffed;
            border-color: #99ff99;
        }
        .room-card {
            background-color: #ededff;
            border-color: #9999ff;
        }
        .card-title {
            font-weight: bold;
            margin-bottom: 10px;
        }
        h2 {
            color: #333;
            margin-top: 40px;
        }
        .next-button {
            background-color: #4CAF50;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 30px;
            transition: background-color 0.3s;
        }
        .next-button:hover {
            background-color: #45a049;
        } 
        .current-turn {
            background-color: #f0f0f0;
            border: 2px solid #4CAF50;
            border-radius: 8px;
            padding: 15px;
            margin: 20px 0;
            text-align: center;
        }
        .turn-notification {
            background-color: #e7f3fe;
            border: 1px solid #b6d4fe;
            color: #0062cc;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
        }
        .waiting-notification {
            background-color: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 10px;
            border-radius: 5px;
            margin-top: 15px;
        }
        .suggestion-section {
            margin-top: 30px;
            border-top: 2px dashed #ccc;
            padding-top: 20px;
        }
        .selection-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            gap: 20px;
            margin-bottom: 20px;
        }
        .selection-group {
            flex: 1;
            min-width: 200px;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 15px;
            background-color: #f9f9f9;
        }
        .options-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
            gap: 10px;
        }
        .option-item {
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: white;
            transition: all 0.2s;
        }
        .option-item:hover {
            background-color: #f0f0f0;
        }
        .option-item.eliminated {
            background-color: #ffdddd;
            text-decoration: line-through;
            color: #999;
        }
        .suggestion-button {
            background-color: #4a6ea9;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 20px;
        }
        .suggestion-button:hover {
            background-color: #3a5a8f;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <h1>Clue Game</h1>
    
    <div class="player-info">
        Playing as: <strong><%= playerName %></strong>
    </div>
    
    <div class="game-container">
        <h2>Your Cards</h2>
        
        <div class="cards-container">
            <% playerCards.forEach(card => { %>
                <% 
                    let cardType = '';
                    if (["Colonel Mustard", "Professor Plum", "Mr. Green", "Mrs. Peacock", "Miss Scarlet", "Mrs. White"].includes(card)) {
                        cardType = 'suspect-card';
                    } else if (["Candlestick", "Knife", "Lead Pipe", "Revolver", "Rope", "Wrench"].includes(card)) {
                        cardType = 'weapon-card';
                    } else {
                        cardType = 'room-card';
                    }
                %>
                <div class="card <%= cardType %>">
                    <div class="card-title">
                        <%= 
                            cardType === 'suspect-card' ? 'Suspect' : 
                            cardType === 'weapon-card' ? 'Weapon' : 'Room' 
                        %>
                    </div>
                    <%= card %>
                </div>
            <% }); %>
        </div>

        <div class="current-turn">
            <h3>Current Turn</h3>
            <p>It's <strong><%= currentTurn %>'s</strong> turn</p>
            <% if (playerName === currentTurn) { %>
                <div class="turn-notification">
                    <p>It's your turn! Make your move.</p>
                </div>
            <% } else { %>
                <div class="waiting-notification">
                    <p>Waiting for <%= currentTurn %> to make a move...</p>
                </div>
            <% } %>
        </div>
        
        <% if (playerCards.length === 0) { %>
            <p>You don't have any cards.</p>
        <% } %>
        
        <button class="next-button" onclick="window.location.href='/deduction'">Next: Go to Detective Notes</button>
        <% if (playerName === currentTurn) { %>
            <div id="suggestion-form" class="suggestion-section">
                <h3>Make a Suggestion</h3>
                <form id="suggestionForm">
                    <div class="selection-container">
                        <div class="selection-group">
                            <h4>Select Suspect</h4>
                            <div class="options-grid">
                                <% suspects.forEach(suspect => { %>
                                    <div class="option-item <%= (playerEliminatedCards && playerEliminatedCards.includes(suspect)) ? 'eliminated' : '' %>">
                                        <input type="radio" name="suspect" id="suspect-<%= suspect.replace(/\s+/g, '') %>" 
                                            value="<%= suspect %>" required>
                                        <label for="suspect-<%= suspect.replace(/\s+/g, '') %>"><%= suspect %></label>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                        
                        <div class="selection-group">
                            <h4>Select Weapon</h4>
                            <div class="options-grid">
                                <% weapons.forEach(weapon => { %>
                                    <div class="option-item <%= (playerEliminatedCards && playerEliminatedCards.includes(weapon)) ? 'eliminated' : '' %>">
                                        <input type="radio" name="weapon" id="weapon-<%= weapon.replace(/\s+/g, '') %>" 
                                            value="<%= weapon %>" required>
                                        <label for="weapon-<%= weapon.replace(/\s+/g, '') %>"><%= weapon %></label>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                        
                        <div class="selection-group">
                            <h4>Select Room</h4>
                            <div class="options-grid">
                                <% rooms.forEach(room => { %>
                                    <div class="option-item <%= (playerEliminatedCards && playerEliminatedCards.includes(room)) ? 'eliminated' : '' %>">
                                        <input type="radio" name="room" id="room-<%= room.replace(/\s+/g, '').replace(/'/g, '') %>" 
                                            value="<%= room %>" required>
                                        <label for="room-<%= room.replace(/\s+/g, '').replace(/'/g, '') %>"><%= room %></label>
                                    </div>
                                <% }); %>
                            </div>
                        </div>
                    </div>
                    
                    <button type="submit" class="suggestion-button">Submit Suggestion</button>
                </form>
                <div id="suggestion-result" class="hidden"></div>
            </div>
        <% } %>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const suggestionForm = document.getElementById('suggestionForm');
            if (suggestionForm) {
                suggestionForm.addEventListener('submit', function(event) {
                    event.preventDefault();
                    
                    const formData = new FormData(suggestionForm);
                    const suggestion = {
                        suspect: formData.get('suspect'),
                        weapon: formData.get('weapon'),
                        room: formData.get('room')
                    };
                    
                    // Validate the form
                    if (!suggestion.suspect || !suggestion.weapon || !suggestion.room) {
                        alert('Please select one option from each category.');
                        return;
                    }
                    
                    // Send suggestion to server
                    fetch('/api/submit-suggestion', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(suggestion)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const resultDiv = document.getElementById('suggestion-result');
                            resultDiv.classList.remove('hidden');
                            
                            if (data.canRefute) {
                                resultDiv.innerHTML = `<div class="turn-notification">${data.message}</div>`;
                                // Disable the form
                                suggestionForm.querySelectorAll('input, button').forEach(el => el.disabled = true);
                                
                                // Poll for updates or redirect
                                checkForSuggestionResponse();
                            } else {
                                resultDiv.innerHTML = `<div class="turn-notification">
                                    <strong>No one can refute your suggestion!</strong><br>
                                    You might be onto something. Next turn will begin soon.
                                </div>`;
                                
                                // Wait and redirect
                                setTimeout(() => {
                                    window.location.reload();
                                }, 5000);
                            }
                        } else {
                            alert('Error: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while submitting your suggestion.');
                    });
                });
            }
            
            // Function to periodically check if someone has responded to the suggestion
            function checkForSuggestionResponse() {
                const checkInterval = setInterval(() => {
                    fetch('/api/check-suggestion-status')
                        .then(response => response.json())
                        .then(data => {
                            if (data.resolved) {
                                clearInterval(checkInterval);
                                window.location.reload();
                            }
                        })
                        .catch(error => {
                            console.error('Error checking suggestion status:', error);
                        });
                }, 3000); // Check every 3 seconds
            }
        });
    </script>
    <script>
        // Poll server to check if this player needs to respond to a suggestion
        function startResponsePolling() {
            // Only start polling if not current turn (to avoid conflicts)
            if ('<%= playerName %>' !== '<%= currentTurn %>') {
                const responseInterval = setInterval(() => {
                    fetch('/api/check-response-turn')
                        .then(response => response.json())
                        .then(data => {
                            if (data.shouldRespond) {
                                clearInterval(responseInterval);
                                window.location.href = '/respond';
                            }
                        })
                        .catch(error => {
                            console.error('Error checking response turn:', error);
                        });
                }, 3000); // Check every 3 seconds
            }
        }
        
        // Start polling when page loads
        document.addEventListener('DOMContentLoaded', function() {
            startResponsePolling();
            
            // Also check for game updates (current turn changes, etc.)
            setInterval(() => {
                fetch('/api/game-status')
                    .then(response => response.json())
                    .then(data => {
                        if (data.gameOver) {
                        alert(`${data.winner} has won the game! 🎉`);
                        window.location.reload();
                        } else if (data.currentTurn !== '<%= currentTurn %>') {
                        window.location.reload();
                        }
                    });
            }, 5000); // Check every 5 seconds
        });
    </script>
</body>
</html>