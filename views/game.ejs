<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Clue Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
            background-color: #f0f8ff;
        }
        .game-container {
            margin: 20px auto;
            max-width: 800px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 8px;
            background-color: white;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        .player-info {
            font-size: 18px;
            margin-bottom: 20px;
            background: #f5f5f5;
            padding: 10px;
            border-radius: 5px;
        }
        .cards-scroll-container {
            position: relative;
            width: 100%;
            padding: 10px 0;
        }
        .cards-container {
            display: flex;
            overflow-x: auto;
            scroll-behavior: smooth;
            padding: 20px 10px;
            gap: 20px;
            -webkit-overflow-scrolling: touch;
            scrollbar-width: thin; 
            scrollbar-color: #ccc transparent;
        }
        .cards-container::-webkit-scrollbar {
            height: 8px;
        }
        .cards-container::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }
        .cards-container::-webkit-scrollbar-thumb {
            background: #ccc;
            border-radius: 10px;
        }
        .cards-container::-webkit-scrollbar-thumb:hover {
            background: #aaa;
        }
        .scroll-button {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background-color: rgba(255, 255, 255, 0.7);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            font-size: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            z-index: 10;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s;
        }
        .scroll-button:hover {
            background-color: rgba(255, 255, 255, 0.9);
        }
        .scroll-left {
            left: 5px;
        }
        .scroll-right {
            right: 5px;
        }
        .card {
            border: 2px solid #333;
            border-radius: 10px;
            padding: 10px;
            width: 140px;
            height: 200px;
            flex-shrink: 0;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #fff;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
            transition: transform 0.3s, box-shadow 0.3s;
            position: relative;
        }
        .card:hover {
            transform: translateY(-10px) scale(1.05);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
            z-index: 5;
        }
        .card.card-image::before {
            content: "";
            display: block;
            padding-top: 100%;
        }
        .card-image {
            background-size: cover;
            background-position: center;
            padding: 0;
            overflow: hidden;
            background-repeat: no-repeat; 
            position: relative;
        }
        .suspect-card {
            border-color: #ff6b6b;
            box-shadow: 0 6px 12px rgba(255, 107, 107, 0.2);
        }
        .weapon-card {
            border-color: #41c7c7;
            box-shadow: 0 6px 12px rgba(65, 199, 199, 0.2);
        }
        .room-card {
            border-color: #6b77ff;
            box-shadow: 0 6px 12px rgba(107, 119, 255, 0.2);
        }
        .card-title {
            font-weight: bold;
            margin-bottom: 10px;
        }
        .card-label {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            width: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 0;
            font-size: 14px;
            text-align: center;
            border-bottom-left-radius: 8px;
            border-bottom-right-radius: 8px;
        }
        h2 {
            color: #333;
            margin-top: 30px;
            position: relative;
            display: inline-block;
        }
        h2::after {
            content: '';
            display: block;
            width: 50%;
            height: 3px;
            background: linear-gradient(to right, #6b77ff, transparent);
            margin: 8px auto 0;
        }
        .next-button {
            background-color: #4CAF50;
            color: white;
            padding: 12px 30px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 30px;
            transition: all 0.3s;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        .next-button:hover {
            background-color: #45a049;
            transform: translateY(-2px);
            box-shadow: 0 6px 8px rgba(0, 0, 0, 0.15);
        } 
        .turn-notification {
            background-color: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 15px;
            border-radius: 5px;
            margin-top: 15px;
        }
        .card-type-indicator {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
        }
        .suspect-indicator {
            background-color: #ff6b6b;
        }
        .weapon-indicator {
            background-color: #41c7c7;
        }
        .room-indicator {
            background-color: #6b77ff;
        }
        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        .popup-content {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            max-width: 80%;
            text-align: center;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            position: relative;
        }
        .popup-close {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
            cursor: pointer;
            color: #666;
        }
        .popup-card {
            border: 2px solid #333;
            border-radius: 10px;
            padding: 10px;
            width: 120px;
            height: 180px;
            margin: 10px auto;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #fff;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }
        .popup-button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            font-size: 16px;
            cursor: pointer;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>Clue Game</h1>
    
    <div class="player-info">
        Playing as: <strong><%= playerName %></strong>
    </div>
    
    <div class="game-container">
        <h2>Your Cards</h2>
        
        <div class="cards-scroll-container">
            <button class="scroll-button scroll-left" onclick="scrollCards('left')">&#10094;</button>
            <div class="cards-container" id="cardsContainer">
                <% playerCards.forEach(card => {
                  let cardType = 'room-card';
                  let indicatorType = 'room-indicator';
                  let isSuspect = ["Colonel Mustard", "Professor Plum", "Mr. Green", "Mrs. Peacock", "Miss Scarlet", "Mrs. White"].includes(card);
                  let isWeapon = ["Candlestick", "Knife", "Lead Pipe", "Revolver", "Rope", "Wrench"].includes(card);
                  
                  if (isSuspect) {
                    cardType = 'suspect-card';
                    indicatorType = 'suspect-indicator';
                  }
                  else if (isWeapon) {
                    cardType = 'weapon-card';
                    indicatorType = 'weapon-indicator';
                  }
                  
                  // Get image URL for the card based on its name
                  const imageUrl = '/cards/' + encodeURIComponent(card) + '.png';
                %>
                  <div class="card <%= cardType %> card-image" style="background-image: url('<%= imageUrl %>');">
                    <div class="card-type-indicator <%= indicatorType %>"></div>
                    <div class="card-label"><%= card %></div>
                  </div>
                <% }); %>
            </div>
            <button class="scroll-button scroll-right" onclick="scrollCards('right')">&#10095;</button>
        </div>
          
        <% if (currentTurn !== playerName) { %>
            <div class="turn-notification">
                <p>Currently waiting for <%= currentTurn %> to make a move...</p>
            </div>
        <% } %>
        
        <% if (playerCards.length === 0) { %>
            <p>You don't have any cards.</p>
        <% } %>
        
        <button class="next-button" onclick="window.location.href='/deduction'">View Detective Notes</button>
    </div>
    <script>
        // Function to scroll the cards horizontally
        function scrollCards(direction) {
            const container = document.getElementById('cardsContainer');
            const scrollAmount = 200; // Adjust scroll amount as needed
            
            if (direction === 'left') {
                container.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
            } else {
                container.scrollBy({ left: scrollAmount, behavior: 'smooth' });
            }
        }
        
        document.addEventListener('DOMContentLoaded', function() {
            // Redirect to make-suggestion page if it's the player's turn
            if ('<%= playerName %>' === '<%= currentTurn %>') {
                window.location.href = '/make-suggestion';
            }
            
            // Add event listener to handle image loading errors
            document.querySelectorAll('.card-image').forEach(card => {
                const backgroundImg = card.style.backgroundImage;
                const url = backgroundImg.slice(5, -2); // Extract URL from url('...') format
                
                const img = new Image();
                img.onerror = function() {
                    console.log('Failed to load card image...')
                    // If image fails to load, add a fallback style
                    const cardType = card.classList.contains('suspect-card') ? 'Suspect' :
                                    card.classList.contains('weapon-card') ? 'Weapon' : 'Room';
                    const cardName = card.querySelector('.card-label').textContent;
                    
                    // Remove background image and reset styles
                    card.style.backgroundImage = '';
                    card.classList.remove('card-image');
                    card.innerHTML = `
                        <div class="card-title">${cardType}</div>
                        ${cardName}
                    `;
                };
                img.src = url;
            });
            
            // Add keyboard navigation for cards
            document.addEventListener('keydown', function(e) {
                if (e.key === 'ArrowLeft') {
                    scrollCards('left');
                } else if (e.key === 'ArrowRight') {
                    scrollCards('right');
                }
            });
            
            // Hide scroll buttons on narrow screens
            function updateScrollButtonVisibility() {
                const container = document.getElementById('cardsContainer');
                const buttons = document.querySelectorAll('.scroll-button');
                
                if (container.scrollWidth <= container.clientWidth) {
                    buttons.forEach(button => button.style.display = 'none');
                } else {
                    buttons.forEach(button => button.style.display = 'flex');
                }
            }

                    // Function to show a popup
            function showPopup(title, message, card = null) {
                document.getElementById('popupTitle').textContent = title;
                document.getElementById('popupMessage').innerHTML = message;
            
                const cardElement = document.getElementById('popupCard');
                if (card) {
                    cardElement.textContent = card;
                    cardElement.style.display = 'flex';
                } else {
                    cardElement.style.display = 'none';
                }
                
                document.getElementById('popupOverlay').style.display = 'flex';
            }

            // Function to close the popup
            function closePopup() {
                document.getElementById('popupOverlay').style.display = 'none';
            }

            // Function to show a popup
            function showPopup(title, message, card = null) {
                console.log('POPUP')
                document.getElementById('popupTitle').textContent = title;
                document.getElementById('popupMessage').innerHTML = message;
            
                const cardElement = document.getElementById('popupCard');
                if (card) {
                    cardElement.textContent = card;
                    cardElement.style.display = 'flex';
                } else {
                    cardElement.style.display = 'none';
                }
                
                document.getElementById('popupOverlay').style.display = 'flex';
            }

            // Function to close the popup
            function closePopup() {
                document.getElementById('popupOverlay').style.display = 'none';
            }

            // Function to check suggestion status using the new backend endpoint
            function checkSuggestionResolution() {
                const playerName = '<%= playerName %>';
                const currentTurn = '<%= currentTurn %>';
                
                // Only check if it's this player's suggestion to resolve
                if (playerName === currentTurn) {
                    fetch('/api/resolve-suggestion')
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && data.resolved) {
                                if (data.refuted) {
                                    showPopup(
                                        "Suggestion Refuted",
                                        `<strong>${data.refutedBy}</strong> has refuted your suggestion by showing you:`,
                                        data.card
                                    );
                                } else if (data.noRefute) {
                                    showPopup(
                                        "Suggestion Result",
                                        "No one could refute your suggestion!"
                                    );
                                }
                            }
                        })
                        .catch(error => console.error("Error resolving suggestion:", error));
                }
            }
            
            // Start polling for suggestion resolution
            document.addEventListener('DOMContentLoaded', function() {
                if ('<%= playerName %>' === '<%= currentTurn %>') {
                    // If it's currently this player's turn, check for suggestion resolution
                    setInterval(checkSuggestionResolution, 1000);
                }
                
                startResponsePolling();
            });
            
            // Initial check and listen for window resize
            updateScrollButtonVisibility();
            window.addEventListener('resize', updateScrollButtonVisibility);
            setInterval(checkSuggestionStatus, 1000);
        });
        
        // Poll server to check if this player needs to respond to a suggestion
        function startResponsePolling() {
            // Only start polling if not current turn (to avoid conflicts)
            if ('<%= playerName %>' !== '<%= currentTurn %>') {
                const responseInterval = setInterval(() => {
                    fetch('/api/check-response-turn')
                        .then(response => response.json())
                        .then(data => {
                            if (data.shouldRespond) {
                                clearInterval(responseInterval);
                                window.location.href = '/respond';
                            }
                        })
                        .catch(error => {
                            console.error('Error checking response turn:', error);
                        });
                }, 1000); // Check every second
            }
        }
        
        // Start polling when page loads
        document.addEventListener('DOMContentLoaded', function() {
            startResponsePolling();
            
            // Also check for game updates (current turn changes, etc.)
            setInterval(() => {
                fetch('/api/game-status')
                    .then(response => response.json())
                    .then(data => {
                    if (data.gameOver) {
                        alert(`${data.winner} has won the game! 🎉`);
                        window.location.reload();
                    } else if (data.currentTurn !== '<%= currentTurn %>') {
                        const notif = document.querySelector('.turn-notification');
                        if (notif) {
                        notif.innerHTML = `<p>Now it's <strong>${data.currentTurn}</strong>'s turn.</p>`;
                        } else {
                        const div = document.createElement('div');
                        div.className = 'turn-notification';
                        div.innerHTML = `<p>Now it's <strong>${data.currentTurn}</strong>'s turn.</p>`;
                        document.querySelector('.game-container').appendChild(div);
                        }

                        if (data.currentTurn === '<%= playerName %>') {
                        window.location.href = '/make-suggestion';
                        }
                    }
                });
            }, 1000);
        });
    </script>
</body>

<div id="popupOverlay" class="popup-overlay" style="display: none;">
    <div class="popup-content">
        <span class="popup-close" onclick="closePopup()">&times;</span>
        <h3 id="popupTitle">Suggestion Result</h3>
        <p id="popupMessage"></p>
        <div id="popupCard" class="popup-card" style="display: none;"></div>
        <button class="popup-button" onclick="closePopup()">OK</button>
    </div>
</div>

</html>